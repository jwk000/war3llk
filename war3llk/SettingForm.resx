<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        UVknQUgZJSodPUNAWGM6V2Q+Wmk2VGA8VWNCXmpLY28tQ0w6UVsmQUgZJSodPUNAWGM6V2Q+Wmk2VGA8
        VWNCXmpLY28tQ0w8UlooQkoZJSkePUVAWGEzTFkqPUUrPEUeLTQKDA4wQUsQFBcAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACD/////8EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIAAAAAAAQAAgAAAAAABAACAAAAAAAEAAIAAAAAAAQAAgAAAAAABAACAAAAAAAEAAIAA
        AAAAAQAAgAAAAAABAACAAAAAAAEAAIAAAAAAAQAAgAAAAAABAACAAAAAAAEAAIAAAAAAAQAAgAAAAAAB
        AACAAAAAAAEAAIAAAAAAAQAAgAAAAAABAACAAAAAAAEAAIAAAAAAAQAAgAAAAAABAACAAAAAAAEAAIAA
        AAAAAQAAgAAAAAABAACAAAAAAAEAAIAAAAAAAQAAgAAAAAABAACAAAAAAAEAAIAAAAAAAQAAgAAAAAAB
        AACAAAAAAAEAAIAAAAAAAQAAgAAAAAABAACAAAAAAAEAAIAAAAAAAQAAgAAAAAABAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg//////BAAA=
</value>
  </data>
</root>